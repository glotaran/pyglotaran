[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "pyglotaran"
description = "The Glotaran fitting engine."
readme = "README.md"
license = { text = "LGPL-3.0" }
authors = [
  { name = "Joern Weissenborn", email = "joern.weissenborn@gmail.com" },
  { name = "Joris Snellenburg", email = "j.snellenburg@gmail.com" },
  { name = "Ivo van Stokkum", email = "i.h.m.van.stokkum@vu.nl" },
]
requires-python = ">=3.10,<3.13"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Physics",
]
dynamic = [ "version" ]
dependencies = [
  "asteval!=0.9.28,>=0.9.22",
  "netcdf4>=1.5.7",
  "numba>=0.55",
  "numpy<2.1,>=1.21.2",
  "odfpy>=1.4.1",
  "openpyxl>=3.0.10",
  "pandas>=1.3.4",
  "pydantic>=2",
  "ruamel-yaml>=0.17.17",
  "scipy>=1.7.2",
  "sdtfile>=2020.8.3",
  "tabulate>=0.8.9",
  "xarray>=2022.3",
]
optional-dependencies.dev = [ "pyglotaran[docs,test]" ]
optional-dependencies.docs = [
  # documentation dependencies
  "jinja2<3.2",
  "jupyterlab>=3",
  "matplotlib>=3",
  "myst-parser>=0.12",
  "nbsphinx>=0.8.1",                 # notebook docs
  "nbval>=0.9.6",
  "numpydoc>=0.8",
  "sphinx>=3.2",
  "sphinx-click>=3.0.1",
  "sphinx-copybutton>=0.3",
  "sphinx-last-updated-by-git>=0.3",
  "sphinx-rtd-theme>=1.2",
  "sphinxcontrib-jquery>=4.1",       # Needed for the search to work Ref.: https://github.com/readthedocs/sphinx_rtd_theme/issues/1434
]
optional-dependencies.extras = [ "pyglotaran-extras>=0.5" ]
optional-dependencies.full = [ "pyglotaran[extras]" ]
optional-dependencies.test = [
  "coverage[toml]",
  "ipython>=7.2",
  "pluggy>=0.7",
  "pytest>=3.7.1",
  "pytest-allclose>=1",
  "pytest-benchmark>=3.1.1",
  "pytest-cov>=2.5.1",
  "pytest-env>=0.6.2",
  "pytest-runner>=2.11.1",
  "types-dataclasses>=0.1.7",
]
urls.Changelog = "https://pyglotaran.readthedocs.io/en/latest/changelog.html"
urls.Documentation = "https://pyglotaran.readthedocs.io"
urls."Glotaran Ecosystem" = "https://glotaran.org"
urls.Homepage = "https://github.com/glotaran/pyglotaran"
urls.Source = "https://github.com/glotaran/pyglotaran"
urls.Tracker = "https://github.com/glotaran/pyglotaran/issues"
scripts.glotaran = "glotaran.cli.main:main"
entry-points."glotaran.plugins.data_io".ascii = "glotaran.builtin.io.ascii.wavelength_time_explicit_file"
entry-points."glotaran.plugins.data_io".nc = "glotaran.builtin.io.netCDF.netCDF"
entry-points."glotaran.plugins.data_io".sdt = "glotaran.builtin.io.sdt.sdt_file_reader"
entry-points."glotaran.plugins.data_io".yml = "glotaran.builtin.io.yml.yml"
entry-points."glotaran.plugins.elements".baseline = "glotaran.builtin.elements.baseline"
entry-points."glotaran.plugins.elements".clp_guide = "glotaran.builtin.elements.clp_guide"
entry-points."glotaran.plugins.elements".coherent_artifact = "glotaran.builtin.elements.coherent_artifact"
entry-points."glotaran.plugins.elements".damped_oscillation = "glotaran.builtin.elements.damped_oscillation"
entry-points."glotaran.plugins.elements".kinetic = "glotaran.builtin.elements.kinetic"
entry-points."glotaran.plugins.elements".spectral = "glotaran.builtin.elements.spectral"
entry-points."glotaran.plugins.project_io".csv = "glotaran.builtin.io.pandas.csv"
entry-points."glotaran.plugins.project_io".tsv = "glotaran.builtin.io.pandas.tsv"
entry-points."glotaran.plugins.project_io".xlsx = "glotaran.builtin.io.pandas.xlsx"
entry-points."glotaran.plugins.project_io".xsx = "glotaran.builtin.io.pandas.xlsx"

[tool.hatch.version]
path = "glotaran/__init__.py"

[tool.hatch.build.targets.sdist]
include = [ "glotaran", "tests" ]

[tool.hatch.build.targets.wheel]
only-include = [ "glotaran" ]

[tool.hatch.envs.default]
features = [ "dev" ]

[tool.pytest.ini_options]
# env = [
#   "DEACTIVATE_GTA_PLUGINS=1",
#   # Uncomment the following lines to deactivate pyglotaran all plugins
#   # Uncomment "env =" and "COMPARE_RESULTS_LOCAL" and set it to a local folder
#   # with results to use as a reference in lieu of the comparison-results branch
#   # in the pyglotaran-examples git repository
#   "COMPARE_RESULTS_LOCAL=~/local_results/", # On *nix
#   "COMPARE_RESULTS_LOCAL=%USERPROFILE%/local_results/", # On Windows
# ]
# Uncomment to ignore deprecation warnings coming from pyglotaran
# (this helps to see the warnings from dependencies)
# filterwarnings = [
#   "ignore:.+glotaran:GlotaranApiDeprecationWarning",
# ]

[tool.coverage.run]
branch = true
omit = [
  'setup.py',
  '*/tests/*',
  '*/test/*',
  # comment the above line if you want to see if all tests did run
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',

  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self\.debug',

  # Don't complain if tests don't hit defensive assertion code:
  'raise AssertionError',
  'raise NotImplementedError',

  # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.:',
  'if TYPE_CHECKING:',
]

[tool.mypy]
plugins = "pydantic.mypy"
ignore_missing_imports = true
scripts_are_modules = true
show_error_codes = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
python_version = "3.10"

[[tool.mypy.overrides]]
module = "glotaran.builtin.megacomplexes.*"
ignore_errors = true

[[tool.mypy.overrides]]
# Should be rewritten anyway see #1171
module = "glotaran.builtin.io.ascii.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "glotaran.cli.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "benchmark.*"
ignore_errors = true

[tool.interrogate]
exclude = [ "setup.py", "docs", "tests", "benchmark/*" ]
ignore-init-module = true
fail-under = 63
